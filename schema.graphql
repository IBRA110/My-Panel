schema {
  query: UsersQueries
  mutation: AccountMutations
}

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

type AccountMutations {
  registration(userName: String, email: String, password: String): SuccessDTO
  login(userName: String, password: String): LoginResponseDTO
  refresh(refreshToken: String): LoginResponseDTO
  logout(refreshToken: String): SuccessDTO
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type AppRoleEntity {
  id: String
  userRoles: [AppUserRoleEntity]
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type AppUserEntity {
  id: String
  firstName: String
  lastName: String
  refreshToken: String
  dateOfBirth: DateTime!
  knownAs: String
  created: DateTime!
  lastActive: DateTime!
  gender: String
  introduction: String
  interests: String
  city: String
  country: String
  images: [ImageEntity]
  messagesSent: [MessageEntity]
  messagesReceived: [MessageEntity]
  userRoles: [AppUserRoleEntity]
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type AppUserRoleEntity {
  user: AppUserEntity
  role: AppRoleEntity
  userId: String!
  roleId: String!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type ImageDTO {
  id: String
  url: String
  isMain: Boolean!
  likes: [ImageLikeEntity]
}

type ImageEntity {
  id: String
  url: String
  appUser: AppUserEntity
  appUserId: String
  isMain: Boolean!
  likes: [ImageLikeEntity]
}

type ImageLikeEntity {
  likedUserId: String
  likedImageId: String
  image: ImageEntity
}

type LoginResponseDTO {
  accessToken: String
  refreshToken: String
}

type MemberDTO {
  id: String
  userName: String
  firstName: String
  lastName: String
  email: String
  photoUrl: String
  dateOfBirth: DateTime!
  age: Int!
  knownAs: String
  created: DateTime!
  lastActive: DateTime!
  gender: String
  introduction: String
  interests: String
  city: String
  country: String
  images: [ImageDTO]
}

type MessageEntity {
  id: String
  senderId: String
  senderUserName: String
  sender: AppUserEntity
  recipientId: String
  recipientUserName: String
  recipient: AppUserEntity
  content: String
  dateRead: DateTime
  messageSent: DateTime!
  senderDeleted: Boolean!
  recipientDeleted: Boolean!
}

type SuccessDTO {
  message: String
}

type UsersQueries {
  user: MemberDTO
}

