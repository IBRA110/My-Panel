type Mutation {
  registration(userName: String, email: String, password: String): SuccessDTO
  login(userName: String, password: String): LoginResponseDTO
  refresh(refreshToken: String): LoginResponseDTO
  logout(refreshToken: String): SuccessDTO
  updateUser(
    city: String
    country: String
    dateOfBirth: DateTime!
    firstName: String
    lastName: String
    interests: String
    introduction: String
  ): MemberUpdateDTO
  uploadUserImage(file: Upload): ImageUpdateDTO
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Query {
  user: MemberDTO
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type MemberUpdateDTO {
  firstName: String
  lastName: String
  dateOfBirth: DateTime!
  introduction: String
  interests: String
  city: String
  country: String
}

type LoginResponseDTO {
  accessToken: String
  refreshToken: String
}

type SuccessDTO {
  message: String
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type ImageUpdateDTO {
  url: String
}

type MemberDTO {
  id: String
  userName: String
  firstName: String
  lastName: String
  email: String
  photoUrl: String
  dateOfBirth: DateTime!
  age: Int!
  knownAs: String
  created: DateTime!
  lastActive: DateTime!
  gender: String
  introduction: String
  interests: String
  city: String
  country: String
  images: [ImageDTO]
}

type ImageDTO {
  id: String
  url: String
  isMain: Boolean!
  likes: [ImageLikeEntity]
}

type ImageLikeEntity {
  likedUserId: String
  likedImageId: String
  image: ImageEntity
}

type ImageEntity {
  id: String
  url: String
  appUser: AppUserEntity
  appUserId: String
  isMain: Boolean!
  likes: [ImageLikeEntity]
}

type AppUserEntity {
  id: String
  firstName: String
  lastName: String
  refreshToken: String
  dateOfBirth: DateTime!
  knownAs: String
  created: DateTime!
  lastActive: DateTime!
  gender: String
  introduction: String
  interests: String
  city: String
  country: String
  images: [ImageEntity]
  messagesSent: [MessageEntity]
  messagesReceived: [MessageEntity]
  userRoles: [AppUserRoleEntity]
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type AppUserRoleEntity {
  user: AppUserEntity
  role: AppRoleEntity
  userId: String!
  roleId: String!
}

type MessageEntity {
  id: String
  senderId: String
  senderUserName: String
  sender: AppUserEntity
  recipientId: String
  recipientUserName: String
  recipient: AppUserEntity
  content: String
  dateRead: DateTime
  messageSent: DateTime!
  senderDeleted: Boolean!
  recipientDeleted: Boolean!
}

type AppRoleEntity {
  id: String
  userRoles: [AppUserRoleEntity]
  name: String
  normalizedName: String
  concurrencyStamp: String
}
